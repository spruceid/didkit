name: ci

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  SSI_REF: c66972290377c6b4bf9b63b2dfdc047dbdcfd989

defaults:
  run:
    working-directory: didkit

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout DIDKit repository
      uses: actions/checkout@v2
      with:
        path: didkit

    - name: Checkout SSI library
      uses: actions/checkout@v2
      with:
        repository: spruceid/ssi
        path: ssi
        ref: ${{env.SSI_REF}}
        submodules: true

    - name: Cache Cargo registry and build artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml', 'lib/Makefile', '**.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build
      run: cargo build --verbose

    - name: Test
      run: cargo test --verbose

    - name: Test CLI
      run: cli/tests/example.sh

    - name: Test CLI with ssh-agent
      run: cli/tests/ssh-agent.sh

    - name: Test HTTP server
      run: http/tests/example.sh

    - name: Test CLI (did:tz)
      env:
        DID_METHOD: tz
      run: cli/tests/example.sh

    - name: Test HTTP server (did:tz)
      env:
        DID_METHOD: tz
      run: http/tests/example.sh

    - name: Test CLI (JWT)
      env:
        PROOF_FORMAT: jwt
      run: cli/tests/example.sh

    - name: Test CLI (JWT VC in LDP VP)
      env:
        VC_PROOF_FORMAT: jwt
      run: cli/tests/example.sh

    - name: Test CLI (LDP VC in JWT VP)
      env:
        VP_PROOF_FORMAT: jwt
      run: cli/tests/example.sh

    - name: Test HTTP server (JWT)
      env:
        PROOF_FORMAT: jwt
      run: http/tests/example.sh

    - name: Test HTTP server (JWT VC in LDP VP)
      env:
        VC_PROOF_FORMAT: jwt
      run: cli/tests/example.sh

    - name: Test HTTP server (LDP VC in JWT VP)
      env:
        VP_PROOF_FORMAT: jwt
      run: cli/tests/example.sh

    - name: Test binary-signing verify example
      run: examples/binary-signing/index.sh verify examples/binary-signing/hello.txt examples/binary-signing/hello-vc.jsonld

    - name: Checkout VC HTTP API Test Suite
      uses: actions/checkout@v2
      with:
        repository: w3c-ccg/vc-http-api-test-suite
        path: didkit/http/tests/vc-http-api/vc-http-api-test-suite
        ref: 163603de2d36289f5220029fd1ed410a969bd057

    - name: Run VC HTTP API Test Suite
      working-directory: didkit/http/tests/vc-http-api
      run: |
        npm install
        npm test

    - name: Install Rust Android targets
      run: make -C lib install-rustup-android

    - name: Install wasm-pack
      run: make -C lib install-wasm-pack

    - name: Use system JDK
      run: echo "$JAVA_HOME/bin" >> $GITHUB_PATH

    - name: Install Flutter
      uses: subosito/flutter-action@v1
      with:
        channel: 'dev'

    - name: Opt out of Dart/Flutter analytics
      run: |
        dart --disable-analytics
        flutter --suppress-analytics config --no-analytics

    - name: Test C FFI
      run: make -C lib ../target/test/c.stamp

    - name: Test Node.js (Neon) package
      run: make -C lib ../target/test/node.stamp

    - name: Test WASM package
      run: make -C lib ../target/test/wasm.stamp

    - name: Test JNI
      run: make -C lib ../target/test/java.stamp

    - name: Test Dart/Flutter plugin
      run: make -C lib ../target/test/flutter.stamp

    - name: Build Android Archive
      run: make -C lib ../target/test/android.stamp

  build_ios:
    runs-on: macos-latest
    steps:
    - name: Checkout DIDKit repository
      uses: actions/checkout@v2
      with:
        path: didkit

    - name: Checkout SSI library
      uses: actions/checkout@v2
      with:
        repository: spruceid/ssi
        path: ssi
        ref: ${{env.SSI_REF}}
        submodules: true

    - name: Cache Cargo registry and build artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml', 'lib/Makefile', '**.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install Rust iOS targets
      run: make -C lib install-rustup-ios

    - name: Build iOS Library
      run: make -C lib ../target/test/ios.stamp

  build_windows:
    runs-on: windows-latest
    steps:
    - name: Checkout DIDKit repository
      uses: actions/checkout@v2
      with:
        path: didkit

    - name: Checkout SSI library
      uses: actions/checkout@v2
      with:
        repository: spruceid/ssi
        path: ssi
        ref: ${{env.SSI_REF}}
        submodules: true

    - name: Cache Cargo registry and build artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml', 'lib/Makefile', '**.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build
      run: cargo build --verbose
